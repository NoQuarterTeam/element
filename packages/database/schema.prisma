generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  password             String
  firstName            String
  lastName             String
  role                 Role         @default(USER)
  avatar               String?
  stripeCustomerId     String       @unique
  stripeSubscriptionId String?      @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  archivedAt           DateTime?
  verifiedAt           DateTime?
  tasks                Task[]
  elements             Element[]
  habits               Habit[]
  habitEntries         HabitEntry[]
  feedbacks            Feedback[]
  pushTokens           PushToken[]

  @@index([email])
  @@index([stripeCustomerId])
}

model PushToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, token])
  @@index([userId])
}

enum TaskRepeat {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Task {
  id              String      @id @default(uuid())
  name            String
  description     String?     @db.LongText
  date            DateTime?
  isComplete      Boolean     @default(false)
  isTemplate      Boolean     @default(false)
  repeat          TaskRepeat?
  startTime       String?
  durationHours   Int?
  durationMinutes Int?
  isImportant     Boolean     @default(false)
  order           Int         @default(50)
  todos           Todo[]
  repeatChildren  Task[]      @relation(name: "RepeatChildren")
  repeatParentId  String?
  repeatParent    Task?       @relation(name: "RepeatChildren", fields: [repeatParentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creatorId       String
  creator         User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  elementId       String
  element         Element     @relation(fields: [elementId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt

  @@index([date])
  @@index([elementId])
  @@index([repeatParentId])
  @@index([creatorId])
}

model Todo {
  id         String   @id @default(uuid())
  name       String
  isComplete Boolean  @default(false)
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([taskId])
}

model Element {
  id         String    @id @default(uuid())
  name       String
  color      String
  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  children   Element[] @relation(name: "ChildElements")
  parent     Element?  @relation(name: "ChildElements", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?
  creator    User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId  String
  tasks      Task[]

  @@index([name])
  @@index([parentId])
  @@index([creatorId])
}

model Habit {
  id                 String    @id @default(uuid())
  name               String
  description        String?
  archivedAt         DateTime?
  startDate          DateTime
  order              Int       @default(0)
  reminderTime       DateTime?
  reminderScheduleId String?

  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  creatorId String
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  entries   HabitEntry[]

  @@index([archivedAt])
  @@index([startDate])
  @@index([creatorId])
}

model HabitEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([habitId])
  @@index([creatorId])
}

enum FeedbackType {
  ISSUE
  IDEA
  OTHER
}

model Feedback {
  id        String       @id @default(uuid())
  content   String
  type      FeedbackType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  creatorId String
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String       @unique
  password             String
  firstName            String
  role                 Role         @default(USER)
  lastName             String
  avatar               String?
  stripeCustomerId     String       @unique
  stripeSubscriptionId String?      @unique
  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  archivedAt           DateTime?    @db.Timestamptz(6)
  tasks                Task[]
  elements             Element[]
  habits               Habit[]
  habitEntries         HabitEntry[]
}

model Task {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  date            DateTime?
  isComplete      Boolean   @default(false)
  startTime       String?
  durationHours   Int?
  durationMinutes Int?
  order           Int       @default(50)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  creatorId       String    @db.Uuid
  creator         User      @relation(fields: [creatorId], references: [id])
  elementId       String    @db.Uuid
  element         Element   @relation(fields: [elementId], references: [id], onDelete: Cascade)
}

model Element {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  color      String
  archivedAt DateTime?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  children   Element[] @relation(name: "ChildElements")
  parent     Element?  @relation(name: "ChildElements", fields: [parentId], references: [id], onDelete: SetNull)
  parentId   String?   @db.Uuid
  creator    User      @relation(fields: [creatorId], references: [id])
  creatorId  String    @db.Uuid
  tasks      Task[]
}

model Habit {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  archivedAt  DateTime?
  startDate   DateTime
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  creatorId   String       @db.Uuid
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  entries     HabitEntry[]
}

model HabitEntry {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  habitId   String   @db.Uuid
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  creatorId String   @db.Uuid
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}
